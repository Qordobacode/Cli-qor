// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes(in *jlexer.Lexer, out *ValueKeyUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "segment":
			out.Segment = string(in.String())
		case "moveToFirstStep":
			out.MoveToFirstStep = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes(out *jwriter.Writer, in ValueKeyUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"segment\":"
		out.RawString(prefix[1:])
		out.String(string(in.Segment))
	}
	{
		const prefix string = ",\"moveToFirstStep\":"
		out.RawString(prefix)
		out.Bool(bool(in.MoveToFirstStep))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValueKeyUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValueKeyUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValueKeyUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValueKeyUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes(l, v)
}
func easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes1(in *jlexer.Lexer, out *SegmentSearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		case "segments":
			if in.IsNull() {
				in.Skip()
				out.Segments = nil
			} else {
				in.Delim('[')
				if out.Segments == nil {
					if !in.IsDelim(']') {
						out.Segments = make([]Segment, 0, 1)
					} else {
						out.Segments = []Segment{}
					}
				} else {
					out.Segments = (out.Segments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Segment
					(v1).UnmarshalEasyJSON(in)
					out.Segments = append(out.Segments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes1(out *jwriter.Writer, in SegmentSearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix[1:])
		(in.Meta).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"segments\":"
		out.RawString(prefix)
		if in.Segments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Segments {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SegmentSearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SegmentSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SegmentSearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SegmentSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes1(l, v)
}
func easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes2(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lastSaved":
			out.LastSaved = int(in.Int())
		case "segmentId":
			out.SegmentID = int(in.Int())
		case "reference":
			out.Reference = string(in.String())
		case "segment":
			out.Segment = string(in.String())
		case "ssText":
			out.SsText = string(in.String())
		case "stringKey":
			out.StringKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes2(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lastSaved\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LastSaved))
	}
	{
		const prefix string = ",\"segmentId\":"
		out.RawString(prefix)
		out.Int(int(in.SegmentID))
	}
	{
		const prefix string = ",\"reference\":"
		out.RawString(prefix)
		out.String(string(in.Reference))
	}
	{
		const prefix string = ",\"segment\":"
		out.RawString(prefix)
		out.String(string(in.Segment))
	}
	{
		const prefix string = ",\"ssText\":"
		out.RawString(prefix)
		out.String(string(in.SsText))
	}
	{
		const prefix string = ",\"stringKey\":"
		out.RawString(prefix)
		out.String(string(in.StringKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Segment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Segment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Segment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Segment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes2(l, v)
}
func easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes3(in *jlexer.Lexer, out *KeyAddRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "reference":
			out.Reference = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes3(out *jwriter.Writer, in KeyAddRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"reference\":"
		out.RawString(prefix)
		out.String(string(in.Reference))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyAddRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyAddRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCeef645aEncodeGithubComQordobacodeCliV2PkgTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyAddRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyAddRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCeef645aDecodeGithubComQordobacodeCliV2PkgTypes3(l, v)
}
