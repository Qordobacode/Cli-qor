// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes(in *jlexer.Lexer, out *WorkspaceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		case "workspaces":
			if in.IsNull() {
				in.Skip()
				out.Workspaces = nil
			} else {
				in.Delim('[')
				if out.Workspaces == nil {
					if !in.IsDelim(']') {
						out.Workspaces = make([]WorkspaceData, 0, 1)
					} else {
						out.Workspaces = []WorkspaceData{}
					}
				} else {
					out.Workspaces = (out.Workspaces)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WorkspaceData
					(v1).UnmarshalEasyJSON(in)
					out.Workspaces = append(out.Workspaces, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes(out *jwriter.Writer, in WorkspaceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix[1:])
		(in.Meta).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"workspaces\":"
		out.RawString(prefix)
		if in.Workspaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Workspaces {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkspaceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkspaceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkspaceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkspaceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes1(in *jlexer.Lexer, out *WorkspaceData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow":
			if in.IsNull() {
				in.Skip()
				out.Workflow = nil
			} else {
				in.Delim('[')
				if out.Workflow == nil {
					if !in.IsDelim(']') {
						out.Workflow = make([]Workflow, 0, 1)
					} else {
						out.Workflow = []Workflow{}
					}
				} else {
					out.Workflow = (out.Workflow)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Workflow
					(v4).UnmarshalEasyJSON(in)
					out.Workflow = append(out.Workflow, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workspace":
			(out.Workspace).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes1(out *jwriter.Writer, in WorkspaceData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow\":"
		out.RawString(prefix[1:])
		if in.Workflow == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Workflow {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"workspace\":"
		out.RawString(prefix)
		(in.Workspace).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkspaceData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkspaceData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkspaceData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkspaceData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes1(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes2(in *jlexer.Lexer, out *Workspace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contentTypeCodes":
			if in.IsNull() {
				in.Skip()
				out.ContentTypeCodes = nil
			} else {
				in.Delim('[')
				if out.ContentTypeCodes == nil {
					if !in.IsDelim(']') {
						out.ContentTypeCodes = make([]ExtensionDescription, 0, 1)
					} else {
						out.ContentTypeCodes = []ExtensionDescription{}
					}
				} else {
					out.ContentTypeCodes = (out.ContentTypeCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 ExtensionDescription
					(v7).UnmarshalEasyJSON(in)
					out.ContentTypeCodes = append(out.ContentTypeCodes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdBy":
			easyjsonD2b7633eDecode(in, &out.CreatedBy)
		case "createdOn":
			out.CreatedOn = int64(in.Int64())
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "organizationId":
			out.OrganizationID = int(in.Int())
		case "segmentation":
			out.Segmentation = string(in.String())
		case "sourcePersona":
			(out.SourcePersona).UnmarshalEasyJSON(in)
		case "targetPersonas":
			if in.IsNull() {
				in.Skip()
				out.TargetPersonas = nil
			} else {
				in.Delim('[')
				if out.TargetPersonas == nil {
					if !in.IsDelim(']') {
						out.TargetPersonas = make([]Person, 0, 1)
					} else {
						out.TargetPersonas = []Person{}
					}
				} else {
					out.TargetPersonas = (out.TargetPersonas)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Person
					(v8).UnmarshalEasyJSON(in)
					out.TargetPersonas = append(out.TargetPersonas, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timezone":
			out.Timezone = string(in.String())
		case "tmMatchMode":
			out.TmMatchMode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes2(out *jwriter.Writer, in Workspace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contentTypeCodes\":"
		out.RawString(prefix[1:])
		if in.ContentTypeCodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.ContentTypeCodes {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"createdBy\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode(out, in.CreatedBy)
	}
	{
		const prefix string = ",\"createdOn\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedOn))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"organizationId\":"
		out.RawString(prefix)
		out.Int(int(in.OrganizationID))
	}
	{
		const prefix string = ",\"segmentation\":"
		out.RawString(prefix)
		out.String(string(in.Segmentation))
	}
	{
		const prefix string = ",\"sourcePersona\":"
		out.RawString(prefix)
		(in.SourcePersona).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"targetPersonas\":"
		out.RawString(prefix)
		if in.TargetPersonas == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.TargetPersonas {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	{
		const prefix string = ",\"tmMatchMode\":"
		out.RawString(prefix)
		out.String(string(in.TmMatchMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Workspace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workspace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workspace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workspace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes2(l, v)
}
func easyjsonD2b7633eDecode(in *jlexer.Lexer, out *struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Role string `json:"role"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode(out *jwriter.Writer, in struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Role string `json:"role"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes3(in *jlexer.Lexer, out *Workflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "order":
			out.Order = int(in.Int())
		case "complete":
			out.Complete = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes3(out *jwriter.Writer, in Workflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.Int(int(in.Order))
	}
	{
		const prefix string = ",\"complete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Complete))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Workflow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workflow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workflow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workflow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes3(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes4(in *jlexer.Lexer, out *TotalCounts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "segmentCount":
			out.SegmentCount = int(in.Int())
		case "wordCount":
			out.WordCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes4(out *jwriter.Writer, in TotalCounts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"segmentCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SegmentCount))
	}
	{
		const prefix string = ",\"wordCount\":"
		out.RawString(prefix)
		out.Int(int(in.WordCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TotalCounts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TotalCounts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TotalCounts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TotalCounts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes4(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes5(in *jlexer.Lexer, out *Tags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tagId":
			out.TagID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes5(out *jwriter.Writer, in Tags) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tagId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TagID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes5(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes6(in *jlexer.Lexer, out *TagRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tagId":
			out.TagID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes6(out *jwriter.Writer, in TagRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tagId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TagID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes6(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes7(in *jlexer.Lexer, out *PushRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.FileName = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "filepath":
			out.Filepath = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes7(out *jwriter.Writer, in PushRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"filepath\":"
		out.RawString(prefix)
		out.String(string(in.Filepath))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes7(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes8(in *jlexer.Lexer, out *Persona) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes8(out *jwriter.Writer, in Persona) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Persona) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Persona) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Persona) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Persona) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes8(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes9(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes9(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes9(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes10(in *jlexer.Lexer, out *Paging) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalEnabled":
			out.TotalEnabled = int(in.Int())
		case "totalResults":
			out.TotalResults = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes10(out *jwriter.Writer, in Paging) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalEnabled\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalEnabled))
	}
	{
		const prefix string = ",\"totalResults\":"
		out.RawString(prefix)
		out.Int(int(in.TotalResults))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Paging) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Paging) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Paging) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Paging) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes10(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes11(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "paging":
			(out.Paging).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes11(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"paging\":"
		out.RawString(prefix[1:])
		(in.Paging).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes11(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes12(in *jlexer.Lexer, out *FileSearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]File, 0, 1)
					} else {
						out.Files = []File{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v13 File
					(v13).UnmarshalEasyJSON(in)
					out.Files = append(out.Files, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "byPersonaProgress":
			if in.IsNull() {
				in.Skip()
				out.ByPersonaProgress = nil
			} else {
				in.Delim('[')
				if out.ByPersonaProgress == nil {
					if !in.IsDelim(']') {
						out.ByPersonaProgress = make([]ByPersonaProgress, 0, 1)
					} else {
						out.ByPersonaProgress = []ByPersonaProgress{}
					}
				} else {
					out.ByPersonaProgress = (out.ByPersonaProgress)[:0]
				}
				for !in.IsDelim(']') {
					var v14 ByPersonaProgress
					(v14).UnmarshalEasyJSON(in)
					out.ByPersonaProgress = append(out.ByPersonaProgress, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "totalCounts":
			(out.TotalCounts).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes12(out *jwriter.Writer, in FileSearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix[1:])
		(in.Meta).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		if in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Files {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"byPersonaProgress\":"
		out.RawString(prefix)
		if in.ByPersonaProgress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.ByPersonaProgress {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"totalCounts\":"
		out.RawString(prefix)
		(in.TotalCounts).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileSearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileSearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes12(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes13(in *jlexer.Lexer, out *FileDeleteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes13(out *jwriter.Writer, in FileDeleteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileDeleteResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileDeleteResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileDeleteResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileDeleteResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes13(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes14(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fileId":
			out.FileID = int(in.Int())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "completed":
			out.Completed = bool(in.Bool())
		case "preparing":
			out.Preparing = bool(in.Bool())
		case "filename":
			out.Filename = string(in.String())
		case "filepath":
			out.Filepath = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]Tags, 0, 2)
					} else {
						out.Tags = []Tags{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Tags
					(v19).UnmarshalEasyJSON(in)
					out.Tags = append(out.Tags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "update":
			out.Update = int64(in.Int64())
		case "createdAt":
			out.CreatedAt = int64(in.Int64())
		case "deleted":
			out.Deleted = bool(in.Bool())
		case "byWorkflowProgress":
			if in.IsNull() {
				in.Skip()
				out.ByWorkflowProgress = nil
			} else {
				in.Delim('[')
				if out.ByWorkflowProgress == nil {
					if !in.IsDelim(']') {
						out.ByWorkflowProgress = make([]ByWorkflowProgress, 0, 1)
					} else {
						out.ByWorkflowProgress = []ByWorkflowProgress{}
					}
				} else {
					out.ByWorkflowProgress = (out.ByWorkflowProgress)[:0]
				}
				for !in.IsDelim(']') {
					var v20 ByWorkflowProgress
					(v20).UnmarshalEasyJSON(in)
					out.ByWorkflowProgress = append(out.ByWorkflowProgress, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorId":
			out.ErrorID = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "counts":
			(out.Counts).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes14(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fileId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FileID))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Completed))
	}
	{
		const prefix string = ",\"preparing\":"
		out.RawString(prefix)
		out.Bool(bool(in.Preparing))
	}
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"filepath\":"
		out.RawString(prefix)
		out.String(string(in.Filepath))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Tags {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"update\":"
		out.RawString(prefix)
		out.Int64(int64(in.Update))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedAt))
	}
	{
		const prefix string = ",\"deleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deleted))
	}
	{
		const prefix string = ",\"byWorkflowProgress\":"
		out.RawString(prefix)
		if in.ByWorkflowProgress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.ByWorkflowProgress {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ErrorID != 0 {
		const prefix string = ",\"errorId\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorID))
	}
	if in.ErrorMessage != "" {
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	if true {
		const prefix string = ",\"counts\":"
		out.RawString(prefix)
		(in.Counts).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes14(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes15(in *jlexer.Lexer, out *ExtensionDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "extensions":
			if in.IsNull() {
				in.Skip()
				out.Extensions = nil
			} else {
				in.Delim('[')
				if out.Extensions == nil {
					if !in.IsDelim(']') {
						out.Extensions = make([]string, 0, 4)
					} else {
						out.Extensions = []string{}
					}
				} else {
					out.Extensions = (out.Extensions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Extensions = append(out.Extensions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes15(out *jwriter.Writer, in ExtensionDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"extensions\":"
		out.RawString(prefix[1:])
		if in.Extensions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Extensions {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtensionDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtensionDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtensionDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtensionDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes15(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes16(in *jlexer.Lexer, out *Counts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "segmentCount":
			out.SegmentCount = int(in.Int())
		case "wordCount":
			out.WordCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes16(out *jwriter.Writer, in Counts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"segmentCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SegmentCount))
	}
	{
		const prefix string = ",\"wordCount\":"
		out.RawString(prefix)
		out.Int(int(in.WordCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Counts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Counts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Counts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Counts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes16(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes17(in *jlexer.Lexer, out *ByWorkflowProgress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflow":
			(out.Workflow).UnmarshalEasyJSON(in)
		case "counts":
			(out.Counts).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes17(out *jwriter.Writer, in ByWorkflowProgress) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflow\":"
		out.RawString(prefix[1:])
		(in.Workflow).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"counts\":"
		out.RawString(prefix)
		(in.Counts).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ByWorkflowProgress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ByWorkflowProgress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ByWorkflowProgress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ByWorkflowProgress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes17(l, v)
}
func easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes18(in *jlexer.Lexer, out *ByPersonaProgress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "persona":
			(out.Persona).UnmarshalEasyJSON(in)
		case "byWorkflowProgress":
			if in.IsNull() {
				in.Skip()
				out.ByWorkflowProgress = nil
			} else {
				in.Delim('[')
				if out.ByWorkflowProgress == nil {
					if !in.IsDelim(']') {
						out.ByWorkflowProgress = make([]ByWorkflowProgress, 0, 1)
					} else {
						out.ByWorkflowProgress = []ByWorkflowProgress{}
					}
				} else {
					out.ByWorkflowProgress = (out.ByWorkflowProgress)[:0]
				}
				for !in.IsDelim(']') {
					var v28 ByWorkflowProgress
					(v28).UnmarshalEasyJSON(in)
					out.ByWorkflowProgress = append(out.ByWorkflowProgress, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes18(out *jwriter.Writer, in ByPersonaProgress) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"persona\":"
		out.RawString(prefix[1:])
		(in.Persona).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"byWorkflowProgress\":"
		out.RawString(prefix)
		if in.ByWorkflowProgress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.ByWorkflowProgress {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ByPersonaProgress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ByPersonaProgress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComQordobacodeCliV2PkgTypes18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ByPersonaProgress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ByPersonaProgress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComQordobacodeCliV2PkgTypes18(l, v)
}
